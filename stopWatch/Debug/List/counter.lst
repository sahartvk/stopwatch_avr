
AVRASM ver. 2.1.30  E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm Sun Sep 04 23:47:33 2022

E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1096): warning: Register r13 already defined by the .DEF directive
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _sec=R6
                 	.DEF _sec_msb=R7
                 	.DEF _minu=R8
                 	.DEF _minu_msb=R9
                 	.DEF _hour=R10
                 	.DEF _hour_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0046 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0073 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
00002e 003a      	.DB  0x3A,0x0
                 _0x2000003:
00002f c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1138): warning: .cseg .db misalignment - padding zero byte
000030 0001      	.DB  0x1
                 _0x2020000:
000031 4e2d
000032 4e41
000033 4900
000034 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\courses\other-courses\avr\projects\counter\Debug\List\counter.asm(1141): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000036 0008      	.DW  0x08
000037 0004      	.DW  0x04
000038 0054      	.DW  __REG_VARS*2
                 
000039 0002      	.DW  0x02
00003a 0160      	.DW  _0x7
00003b 005c      	.DW  _0x0*2
                 
00003c 0002      	.DW  0x02
00003d 0162      	.DW  _0x7+2
00003e 005c      	.DW  _0x0*2
                 
00003f 0002      	.DW  0x02
000040 017e      	.DW  __base_y_G100
000041 005e      	.DW  _0x2000003*2
                 
000042 0001      	.DW  0x01
000043 0183      	.DW  __seed_G101
000044 0060      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000045 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000046 94f8      	CLI
000047 27ee      	CLR  R30
000048 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000049 e0f1      	LDI  R31,1
00004a bffb      	OUT  GICR,R31
00004b bfeb      	OUT  GICR,R30
00004c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004d e08d      	LDI  R24,(14-2)+1
00004e e0a2      	LDI  R26,2
00004f 27bb      	CLR  R27
                 __CLEAR_REG:
000050 93ed      	ST   X+,R30
000051 958a      	DEC  R24
000052 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000053 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000054 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000055 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000059 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005b 9185      	LPM  R24,Z+
00005c 9195      	LPM  R25,Z+
00005d 9700      	SBIW R24,0
00005e f061      	BREQ __GLOBAL_INI_END
00005f 91a5      	LPM  R26,Z+
000060 91b5      	LPM  R27,Z+
000061 9005      	LPM  R0,Z+
000062 9015      	LPM  R1,Z+
000063 01bf      	MOVW R22,R30
000064 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000065 9005      	LPM  R0,Z+
000066 920d      	ST   X+,R0
000067 9701      	SBIW R24,1
000068 f7e1      	BRNE __GLOBAL_INI_LOOP
000069 01fb      	MOVW R30,R22
00006a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006c bfed      	OUT  SPL,R30
00006d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000070 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000071 940c 00de 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 9/3/2022
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;// Declare your global variables here
                 ;int count=0;
                 ;int sec=0;
                 ;int minu=0;
                 ;int hour=0;
                 ;char str[16], temp[10];
                 ;
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 002A {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000073 920a      	ST   -Y,R0
000074 921a      	ST   -Y,R1
000075 92fa      	ST   -Y,R15
000076 936a      	ST   -Y,R22
000077 937a      	ST   -Y,R23
000078 938a      	ST   -Y,R24
000079 939a      	ST   -Y,R25
00007a 93aa      	ST   -Y,R26
00007b 93ba      	ST   -Y,R27
00007c 93ea      	ST   -Y,R30
00007d 93fa      	ST   -Y,R31
00007e b7ef      	IN   R30,SREG
00007f 93ea      	ST   -Y,R30
                 ; 0000 002B // Reinitialize Timer 0 value
                 ; 0000 002C TCNT0=0x83;
000080 e8e3      	LDI  R30,LOW(131)
000081 bfe2      	OUT  0x32,R30
                 ; 0000 002D // Place your code here
                 ; 0000 002E     if(PINA.0==0){
000082 99c8      	SBIC 0x19,0
000083 c04c      	RJMP _0x3
                 ; 0000 002F         count++;
000084 01f2      	MOVW R30,R4
000085 9631      	ADIW R30,1
000086 012f      	MOVW R4,R30
                 ; 0000 0030         if(count == 1000){
000087 eee8      	LDI  R30,LOW(1000)
000088 e0f3      	LDI  R31,HIGH(1000)
000089 15e4      	CP   R30,R4
00008a 05f5      	CPC  R31,R5
00008b f009      	BREQ PC+2
00008c c043      	RJMP _0x4
                 ; 0000 0031             count=0;
00008d 2444      	CLR  R4
00008e 2455      	CLR  R5
                 ; 0000 0032             sec++;
00008f 01f3      	MOVW R30,R6
000090 9631      	ADIW R30,1
000091 013f      	MOVW R6,R30
                 ; 0000 0033             if(sec==60){
000092 e3ec      	LDI  R30,LOW(60)
000093 e0f0      	LDI  R31,HIGH(60)
000094 15e6      	CP   R30,R6
000095 05f7      	CPC  R31,R7
000096 f479      	BRNE _0x5
                 ; 0000 0034                 sec=0;
000097 2466      	CLR  R6
000098 2477      	CLR  R7
                 ; 0000 0035                 minu++;
000099 01f4      	MOVW R30,R8
00009a 9631      	ADIW R30,1
00009b 014f      	MOVW R8,R30
                 ; 0000 0036                 if(minu==60){
00009c e3ec      	LDI  R30,LOW(60)
00009d e0f0      	LDI  R31,HIGH(60)
00009e 15e8      	CP   R30,R8
00009f 05f9      	CPC  R31,R9
0000a0 f429      	BRNE _0x6
                 ; 0000 0037                     minu=0;
0000a1 2488      	CLR  R8
0000a2 2499      	CLR  R9
                 ; 0000 0038                     hour++;
0000a3 01f5      	MOVW R30,R10
0000a4 9631      	ADIW R30,1
0000a5 015f      	MOVW R10,R30
                 ; 0000 0039                 }
                 ; 0000 003A             }
                 _0x6:
                 ; 0000 003B 
                 ; 0000 003C             itoa(hour,str);
                 _0x5:
0000a6 92ba      	ST   -Y,R11
0000a7 92aa      	ST   -Y,R10
0000a8 e6a4      	LDI  R26,LOW(_str)
0000a9 e0b1      	LDI  R27,HIGH(_str)
0000aa 940e 01e8 	CALL SUBOPT_0x0
                 ; 0000 003D             strcat(str,":");
                +
0000ac e6a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000ad e0b1     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000ae 940e 01d7 	CALL _strcat
                 ; 0000 003E             //hour:
                 ; 0000 003F             itoa(minu,temp);
0000b0 929a      	ST   -Y,R9
0000b1 928a      	ST   -Y,R8
0000b2 e7a4      	LDI  R26,LOW(_temp)
0000b3 e0b1      	LDI  R27,HIGH(_temp)
0000b4 940e 01e8 	CALL SUBOPT_0x0
                 ; 0000 0040             strcat(str,temp);
0000b6 e7a4      	LDI  R26,LOW(_temp)
0000b7 e0b1      	LDI  R27,HIGH(_temp)
0000b8 940e 01d7 	CALL _strcat
                 ; 0000 0041             strcat(str,":");
0000ba e6e4      	LDI  R30,LOW(_str)
0000bb e0f1      	LDI  R31,HIGH(_str)
0000bc 93fa      	ST   -Y,R31
0000bd 93ea      	ST   -Y,R30
                +
0000be e6a2     +LDI R26 , LOW ( _0x7 + ( 2 ) )
0000bf e0b1     +LDI R27 , HIGH ( _0x7 + ( 2 ) )
                 	__POINTW2MN _0x7,2
0000c0 940e 01d7 	CALL _strcat
                 ; 0000 0042             //hour:min:
                 ; 0000 0043             itoa(sec,temp);
0000c2 927a      	ST   -Y,R7
0000c3 926a      	ST   -Y,R6
0000c4 e7a4      	LDI  R26,LOW(_temp)
0000c5 e0b1      	LDI  R27,HIGH(_temp)
0000c6 940e 01e8 	CALL SUBOPT_0x0
                 ; 0000 0044             strcat(str,temp);
0000c8 e7a4      	LDI  R26,LOW(_temp)
0000c9 e0b1      	LDI  R27,HIGH(_temp)
0000ca 940e 01d7 	CALL _strcat
                 ; 0000 0045             //hour:min:sec
                 ; 0000 0046             lcd_clear();
0000cc d079      	RCALL _lcd_clear
                 ; 0000 0047             lcd_puts(str);
0000cd e6a4      	LDI  R26,LOW(_str)
0000ce e0b1      	LDI  R27,HIGH(_str)
0000cf d099      	RCALL _lcd_puts
                 ; 0000 0048         }
                 ; 0000 0049     }
                 _0x4:
                 ; 0000 004A 
                 ; 0000 004B }
                 _0x3:
0000d0 91e9      	LD   R30,Y+
0000d1 bfef      	OUT  SREG,R30
0000d2 91f9      	LD   R31,Y+
0000d3 91e9      	LD   R30,Y+
0000d4 91b9      	LD   R27,Y+
0000d5 91a9      	LD   R26,Y+
0000d6 9199      	LD   R25,Y+
0000d7 9189      	LD   R24,Y+
0000d8 9179      	LD   R23,Y+
0000d9 9169      	LD   R22,Y+
0000da 90f9      	LD   R15,Y+
0000db 9019      	LD   R1,Y+
0000dc 9009      	LD   R0,Y+
0000dd 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000160           	.BYTE 0x4
                 ;
                 ;void main(void)
                 ; 0000 004E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 004F // Declare your local variables here
                 ; 0000 0050 
                 ; 0000 0051 // Input/Output Ports initialization
                 ; 0000 0052 // Port A initialization
                 ; 0000 0053 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0054 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000de e0e0      	LDI  R30,LOW(0)
0000df bbea      	OUT  0x1A,R30
                 ; 0000 0055 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=P
                 ; 0000 0056 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (1<<PORTA0);
0000e0 e0e1      	LDI  R30,LOW(1)
0000e1 bbeb      	OUT  0x1B,R30
                 ; 0000 0057 
                 ; 0000 0058 // Port B initialization
                 ; 0000 0059 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 bbe7      	OUT  0x17,R30
                 ; 0000 005B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000e4 bbe8      	OUT  0x18,R30
                 ; 0000 005D 
                 ; 0000 005E // Port C initialization
                 ; 0000 005F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0060 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000e5 bbe4      	OUT  0x14,R30
                 ; 0000 0061 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0062 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000e6 bbe5      	OUT  0x15,R30
                 ; 0000 0063 
                 ; 0000 0064 // Port D initialization
                 ; 0000 0065 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0066 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000e7 bbe1      	OUT  0x11,R30
                 ; 0000 0067 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0068 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000e8 bbe2      	OUT  0x12,R30
                 ; 0000 0069 
                 ; 0000 006A // Timer/Counter 0 initialization
                 ; 0000 006B // Clock source: System Clock
                 ; 0000 006C // Clock value: 125.000 kHz
                 ; 0000 006D // Mode: Normal top=0xFF
                 ; 0000 006E // OC0 output: Disconnected
                 ; 0000 006F // Timer Period: 1 ms
                 ; 0000 0070 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000e9 e0e3      	LDI  R30,LOW(3)
0000ea bfe3      	OUT  0x33,R30
                 ; 0000 0071 TCNT0=0x83;
0000eb e8e3      	LDI  R30,LOW(131)
0000ec bfe2      	OUT  0x32,R30
                 ; 0000 0072 OCR0=0x00;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee bfec      	OUT  0x3C,R30
                 ; 0000 0073 
                 ; 0000 0074 // Timer/Counter 1 initialization
                 ; 0000 0075 // Clock source: System Clock
                 ; 0000 0076 // Clock value: Timer1 Stopped
                 ; 0000 0077 // Mode: Normal top=0xFFFF
                 ; 0000 0078 // OC1A output: Disconnected
                 ; 0000 0079 // OC1B output: Disconnected
                 ; 0000 007A // Noise Canceler: Off
                 ; 0000 007B // Input Capture on Falling Edge
                 ; 0000 007C // Timer1 Overflow Interrupt: Off
                 ; 0000 007D // Input Capture Interrupt: Off
                 ; 0000 007E // Compare A Match Interrupt: Off
                 ; 0000 007F // Compare B Match Interrupt: Off
                 ; 0000 0080 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ef bdef      	OUT  0x2F,R30
                 ; 0000 0081 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000f0 bdee      	OUT  0x2E,R30
                 ; 0000 0082 TCNT1H=0x00;
0000f1 bded      	OUT  0x2D,R30
                 ; 0000 0083 TCNT1L=0x00;
0000f2 bdec      	OUT  0x2C,R30
                 ; 0000 0084 ICR1H=0x00;
0000f3 bde7      	OUT  0x27,R30
                 ; 0000 0085 ICR1L=0x00;
0000f4 bde6      	OUT  0x26,R30
                 ; 0000 0086 OCR1AH=0x00;
0000f5 bdeb      	OUT  0x2B,R30
                 ; 0000 0087 OCR1AL=0x00;
0000f6 bdea      	OUT  0x2A,R30
                 ; 0000 0088 OCR1BH=0x00;
0000f7 bde9      	OUT  0x29,R30
                 ; 0000 0089 OCR1BL=0x00;
0000f8 bde8      	OUT  0x28,R30
                 ; 0000 008A 
                 ; 0000 008B // Timer/Counter 2 initialization
                 ; 0000 008C // Clock source: System Clock
                 ; 0000 008D // Clock value: Timer2 Stopped
                 ; 0000 008E // Mode: Normal top=0xFF
                 ; 0000 008F // OC2 output: Disconnected
                 ; 0000 0090 ASSR=0<<AS2;
0000f9 bde2      	OUT  0x22,R30
                 ; 0000 0091 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000fa bde5      	OUT  0x25,R30
                 ; 0000 0092 TCNT2=0x00;
0000fb bde4      	OUT  0x24,R30
                 ; 0000 0093 OCR2=0x00;
0000fc bde3      	OUT  0x23,R30
                 ; 0000 0094 
                 ; 0000 0095 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0096 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000fd e0e1      	LDI  R30,LOW(1)
0000fe bfe9      	OUT  0x39,R30
                 ; 0000 0097 
                 ; 0000 0098 // External Interrupt(s) initialization
                 ; 0000 0099 // INT0: Off
                 ; 0000 009A // INT1: Off
                 ; 0000 009B // INT2: Off
                 ; 0000 009C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ff e0e0      	LDI  R30,LOW(0)
000100 bfe5      	OUT  0x35,R30
                 ; 0000 009D MCUCSR=(0<<ISC2);
000101 bfe4      	OUT  0x34,R30
                 ; 0000 009E 
                 ; 0000 009F // USART initialization
                 ; 0000 00A0 // USART disabled
                 ; 0000 00A1 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000102 b9ea      	OUT  0xA,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Analog Comparator initialization
                 ; 0000 00A4 // Analog Comparator: Off
                 ; 0000 00A5 // The Analog Comparator's positive input is
                 ; 0000 00A6 // connected to the AIN0 pin
                 ; 0000 00A7 // The Analog Comparator's negative input is
                 ; 0000 00A8 // connected to the AIN1 pin
                 ; 0000 00A9 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000103 e8e0      	LDI  R30,LOW(128)
000104 b9e8      	OUT  0x8,R30
                 ; 0000 00AA SFIOR=(0<<ACME);
000105 e0e0      	LDI  R30,LOW(0)
000106 bfe0      	OUT  0x30,R30
                 ; 0000 00AB 
                 ; 0000 00AC // ADC initialization
                 ; 0000 00AD // ADC disabled
                 ; 0000 00AE ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000107 b9e6      	OUT  0x6,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // SPI initialization
                 ; 0000 00B1 // SPI disabled
                 ; 0000 00B2 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000108 b9ed      	OUT  0xD,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // TWI initialization
                 ; 0000 00B5 // TWI disabled
                 ; 0000 00B6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000109 bfe6      	OUT  0x36,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Alphanumeric LCD initialization
                 ; 0000 00B9 // Connections are specified in the
                 ; 0000 00BA // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00BB // RS - PORTD Bit 0
                 ; 0000 00BC // RD - PORTD Bit 1
                 ; 0000 00BD // EN - PORTD Bit 2
                 ; 0000 00BE // D4 - PORTD Bit 4
                 ; 0000 00BF // D5 - PORTD Bit 5
                 ; 0000 00C0 // D6 - PORTD Bit 6
                 ; 0000 00C1 // D7 - PORTD Bit 7
                 ; 0000 00C2 // Characters/line: 16
                 ; 0000 00C3 lcd_init(16);
00010a e1a0      	LDI  R26,LOW(16)
00010b d06e      	RCALL _lcd_init
                 ; 0000 00C4 
                 ; 0000 00C5 // Global enable interrupts
                 ; 0000 00C6 #asm("sei")
00010c 9478      	sei
                 ; 0000 00C7 
                 ; 0000 00C8 while (1)
                 _0x8:
                 ; 0000 00C9       {
                 ; 0000 00CA       // Place your code here
                 ; 0000 00CB       if(PINA.0==1){
00010d 9bc8      	SBIS 0x19,0
00010e c008      	RJMP _0xB
                 ; 0000 00CC         count=0;
00010f 2444      	CLR  R4
000110 2455      	CLR  R5
                 ; 0000 00CD         sec=0;
000111 2466      	CLR  R6
000112 2477      	CLR  R7
                 ; 0000 00CE         minu=0;
000113 2488      	CLR  R8
000114 2499      	CLR  R9
                 ; 0000 00CF         hour=0;
000115 24aa      	CLR  R10
000116 24bb      	CLR  R11
                 ; 0000 00D0       }
                 ; 0000 00D1 
                 ; 0000 00D2       }
                 _0xB:
000117 cff5      	RJMP _0x8
                 ; 0000 00D3 }
                 _0xC:
000118 cfff      	RJMP _0xC
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000119 93aa      	ST   -Y,R26
00011a b3e2      	IN   R30,0x12
00011b 70ef      	ANDI R30,LOW(0xF)
00011c 2fae      	MOV  R26,R30
00011d 81e8      	LD   R30,Y
00011e 7fe0      	ANDI R30,LOW(0xF0)
00011f 2bea      	OR   R30,R26
000120 bbe2      	OUT  0x12,R30
                +
000121 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000122 958a     +DEC R24
000123 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000124 9a92      	SBI  0x12,2
                +
000125 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000126 958a     +DEC R24
000127 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000128 9892      	CBI  0x12,2
                +
000129 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00012a 958a     +DEC R24
00012b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00012c c07a      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00012d 93aa      	ST   -Y,R26
00012e 81a8      	LD   R26,Y
00012f dfe9      	RCALL __lcd_write_nibble_G100
000130 81e8          ld    r30,y
000131 95e2          swap  r30
000132 83e8          st    y,r30
000133 81a8      	LD   R26,Y
000134 dfe4      	RCALL __lcd_write_nibble_G100
                +
000135 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000136 958a     +DEC R24
000137 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000138 c06e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000139 93aa      	ST   -Y,R26
00013a 81e8      	LD   R30,Y
00013b e0f0      	LDI  R31,0
00013c 58e2      	SUBI R30,LOW(-__base_y_G100)
00013d 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00013e 81e0      	LD   R30,Z
00013f 81a9      	LDD  R26,Y+1
000140 0fae      	ADD  R26,R30
000141 dfeb      	RCALL __lcd_write_data
000142 80d9      	LDD  R13,Y+1
000143 80c8      	LDD  R12,Y+0
000144 9622      	ADIW R28,2
000145 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000146 e0a2      	LDI  R26,LOW(2)
000147 940e 01ef 	CALL SUBOPT_0x1
000149 e0ac      	LDI  R26,LOW(12)
00014a dfe2      	RCALL __lcd_write_data
00014b e0a1      	LDI  R26,LOW(1)
00014c 940e 01ef 	CALL SUBOPT_0x1
00014e e0e0      	LDI  R30,LOW(0)
00014f 2ece      	MOV  R12,R30
000150 2ede      	MOV  R13,R30
000151 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000152 93aa      	ST   -Y,R26
000153 81a8      	LD   R26,Y
000154 30aa      	CPI  R26,LOW(0xA)
000155 f021      	BREQ _0x2000005
000156 91e0 0182 	LDS  R30,__lcd_maxx
000158 16de      	CP   R13,R30
000159 f048      	BRLO _0x2000004
                 _0x2000005:
00015a e0e0      	LDI  R30,LOW(0)
00015b 93ea      	ST   -Y,R30
00015c 94c3      	INC  R12
00015d 2dac      	MOV  R26,R12
00015e dfda      	RCALL _lcd_gotoxy
00015f 81a8      	LD   R26,Y
000160 30aa      	CPI  R26,LOW(0xA)
000161 f409      	BRNE _0x2000007
000162 c044      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
000163 94d3      	INC  R13
000164 9a90      	SBI  0x12,0
000165 81a8      	LD   R26,Y
000166 dfc6      	RCALL __lcd_write_data
000167 9890      	CBI  0x12,0
000168 c03e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000169 93ba      	ST   -Y,R27
00016a 93aa      	ST   -Y,R26
00016b 931a      	ST   -Y,R17
                 _0x2000008:
00016c 81a9      	LDD  R26,Y+1
00016d 81ba      	LDD  R27,Y+1+1
00016e 91ed      	LD   R30,X+
00016f 83a9      	STD  Y+1,R26
000170 83ba      	STD  Y+1+1,R27
000171 2f1e      	MOV  R17,R30
000172 30e0      	CPI  R30,0
000173 f019      	BREQ _0x200000A
000174 2fa1      	MOV  R26,R17
000175 dfdc      	RCALL _lcd_putchar
000176 cff5      	RJMP _0x2000008
                 _0x200000A:
000177 8118      	LDD  R17,Y+0
000178 9623      	ADIW R28,3
000179 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00017a 93aa      	ST   -Y,R26
00017b b3e1      	IN   R30,0x11
00017c 6fe0      	ORI  R30,LOW(0xF0)
00017d bbe1      	OUT  0x11,R30
00017e 9a8a      	SBI  0x11,2
00017f 9a88      	SBI  0x11,0
000180 9a89      	SBI  0x11,1
000181 9892      	CBI  0x12,2
000182 9890      	CBI  0x12,0
000183 9891      	CBI  0x12,1
000184 81e8      	LD   R30,Y
000185 93e0 0182 	STS  __lcd_maxx,R30
000187 58e0      	SUBI R30,-LOW(128)
                +
000188 93e0 0180+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00018a 81e8      	LD   R30,Y
00018b 54e0      	SUBI R30,-LOW(192)
                +
00018c 93e0 0181+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00018e e1a4      	LDI  R26,LOW(20)
00018f e0b0      	LDI  R27,0
000190 940e 01fd 	CALL _delay_ms
000192 940e 01f5 	CALL SUBOPT_0x2
000194 940e 01f5 	CALL SUBOPT_0x2
000196 940e 01f5 	CALL SUBOPT_0x2
000198 e2a0      	LDI  R26,LOW(32)
000199 df7f      	RCALL __lcd_write_nibble_G100
                +
00019a ec88     +LDI R24 , LOW ( 200 )
00019b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00019c 9701     +SBIW R24 , 1
00019d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00019e e2a8      	LDI  R26,LOW(40)
00019f df8d      	RCALL __lcd_write_data
0001a0 e0a4      	LDI  R26,LOW(4)
0001a1 df8b      	RCALL __lcd_write_data
0001a2 e8a5      	LDI  R26,LOW(133)
0001a3 df89      	RCALL __lcd_write_data
0001a4 e0a6      	LDI  R26,LOW(6)
0001a5 df87      	RCALL __lcd_write_data
0001a6 df9f      	RCALL _lcd_clear
                 _0x20A0001:
0001a7 9621      	ADIW R28,1
0001a8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0001a9 93ba      	ST   -Y,R27
0001aa 93aa      	ST   -Y,R26
0001ab 91a9          ld   r26,y+
0001ac 91b9          ld   r27,y+
0001ad 91e9          ld   r30,y+
0001ae 91f9          ld   r31,y+
0001af 9630          adiw r30,0
0001b0 f42a          brpl __itoa0
0001b1 95e0          com  r30
0001b2 95f0          com  r31
0001b3 9631          adiw r30,1
0001b4 e26d          ldi  r22,'-'
0001b5 936d          st   x+,r22
                 __itoa0:
0001b6 94e8          clt
0001b7 e180          ldi  r24,low(10000)
0001b8 e297          ldi  r25,high(10000)
0001b9 d00d          rcall __itoa1
0001ba ee88          ldi  r24,low(1000)
0001bb e093          ldi  r25,high(1000)
0001bc d00a          rcall __itoa1
0001bd e684          ldi  r24,100
0001be 2799          clr  r25
0001bf d007          rcall __itoa1
0001c0 e08a          ldi  r24,10
0001c1 d005          rcall __itoa1
0001c2 2f6e          mov  r22,r30
0001c3 d010          rcall __itoa5
0001c4 2766          clr  r22
0001c5 936c          st   x,r22
0001c6 9508          ret
                 
                 __itoa1:
0001c7 2766          clr	 r22
                 __itoa2:
0001c8 17e8          cp   r30,r24
0001c9 07f9          cpc  r31,r25
0001ca f020          brlo __itoa3
0001cb 9563          inc  r22
0001cc 1be8          sub  r30,r24
0001cd 0bf9          sbc  r31,r25
0001ce f7c9          brne __itoa2
                 __itoa3:
0001cf 2366          tst  r22
0001d0 f411          brne __itoa4
0001d1 f016          brts __itoa5
0001d2 9508          ret
                 __itoa4:
0001d3 9468          set
                 __itoa5:
0001d4 5d60          subi r22,-0x30
0001d5 936d          st   x+,r22
0001d6 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcat:
                 ; .FSTART _strcat
0001d7 93ba      	ST   -Y,R27
0001d8 93aa      	ST   -Y,R26
0001d9 91e9          ld   r30,y+
0001da 91f9          ld   r31,y+
0001db 91a9          ld   r26,y+
0001dc 91b9          ld   r27,y+
0001dd 01cd          movw r24,r26
                 strcat0:
0001de 916d          ld   r22,x+
0001df 2366          tst  r22
0001e0 f7e9          brne strcat0
0001e1 9711          sbiw r26,1
                 strcat1:
0001e2 9161          ld   r22,z+
0001e3 936d          st   x+,r22
0001e4 2366          tst  r22
0001e5 f7e1          brne strcat1
0001e6 01fc          movw r30,r24
0001e7 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _str:
000164           	.BYTE 0x10
                 _temp:
000174           	.BYTE 0xA
                 __base_y_G100:
00017e           	.BYTE 0x4
                 __lcd_maxx:
000182           	.BYTE 0x1
                 __seed_G101:
000183           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0001e8 940e 01a9 	CALL _itoa
0001ea e6e4      	LDI  R30,LOW(_str)
0001eb e0f1      	LDI  R31,HIGH(_str)
0001ec 93fa      	ST   -Y,R31
0001ed 93ea      	ST   -Y,R30
0001ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001ef 940e 012d 	CALL __lcd_write_data
0001f1 e0a3      	LDI  R26,LOW(3)
0001f2 e0b0      	LDI  R27,0
0001f3 940c 01fd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001f5 e3a0      	LDI  R26,LOW(48)
0001f6 940e 0119 	CALL __lcd_write_nibble_G100
                +
0001f8 ec88     +LDI R24 , LOW ( 200 )
0001f9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001fa 9701     +SBIW R24 , 1
0001fb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001fc 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001fd 9610      	adiw r26,0
0001fe f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ff ed80     +LDI R24 , LOW ( 0x7D0 )
000200 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000201 9701     +SBIW R24 , 1
000202 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000203 95a8      	wdr
000204 9711      	sbiw r26,1
000205 f7c9      	brne __delay_ms0
                 __delay_ms1:
000206 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   6 r7 :   4 
r8 :   6 r9 :   4 r10:   4 r11:   2 r12:   4 r13:   4 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  19 r23:   2 
r24:  31 r25:  12 r26:  54 r27:  21 r28:   4 r29:   1 r30: 131 r31:  22 
x  :   9 y  :  74 z  :   9 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :  10 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  18 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  16 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   5 cpc   :   4 cpi   :   3 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   3 jmp   :  23 ld    :  34 ldd   :   6 ldi   :  83 
lds   :   1 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   7 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  44 pop   :   0 push  :   0 rcall :  21 ret   :  11 
reti  :   1 rjmp  :  11 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   5 sbic  :   1 sbis  :   1 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  43 std   :   2 sts   :   3 sub   :   1 subi  :   4 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00040e    982     56   1038   16384   6.3%
[.dseg] 0x000060 0x000187      0     39     39    1024   3.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
